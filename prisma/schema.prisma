generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Carrera {
  id                  Int       @id @default(autoincrement())
  nombre              String    @db.VarChar(255)
  centroUniversitario String    @map("centro_universitario") @db.VarChar(255)
  usuarios            Usuario[]

  @@map("carreras")
}

model Usuario {
  id                Int                   @id @default(autoincrement())
  nombre            String                @db.VarChar(255)
  primerApellido    String                @map("primer_apellido") @db.VarChar(255)
  segundoApellido   String                @map("segundo_apellido") @db.VarChar(255)
  username          String                @unique @db.VarChar(32)
  correo            String                @unique @db.VarChar(255)
  password          String                @db.VarChar(255)
  carreraId         Int?                  @map("carrera_id")
  bio               String?               @db.Text
  age               Int?
  createdAt         DateTime              @default(now()) @map("created_at")
  actividades       Actividad[]
  evaluaciones      Evaluacion[]
  likes             Like[]
  mensajesEnviados  Mensaje[]             @relation("MensajesEnviados")
  mensajesRecibidos Mensaje[]             @relation("MensajesRecibidos")
  miembros          Miembro[]
  propuestas        Propuesta[]
  representante     Representante[]
  sessions          Session[]
  carrera           Carrera?              @relation(fields: [carreraId], references: [id])
  habilidades       UsuariosHabilidades[]

  @@unique([carrera])
  @@index([carreraId], map: "usuarios_carrera_id_fkey")
  @@map("usuarios")
}

model Session {
  id        String   @id @db.VarChar(255)
  usuarioId Int?     @map("usuario_id")
  annon     Boolean? @default(false)
  ipAddress String?  @map("ip_address") @db.VarChar(50)
  expiresAt DateTime @map("expires_at")
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId], map: "session_usuario_id_fkey")
  @@map("session")
}

model Habilidad {
  id       Int                   @id @default(autoincrement())
  nombre   String                @db.VarChar(255)
  usuarios UsuariosHabilidades[]

  @@map("habilidades")
}

model UsuariosHabilidades {
  usuarioId   Int       @map("usuario_id")
  habilidadId Int       @map("habilidad_id")
  habilidad   Habilidad @relation(fields: [habilidadId], references: [id])
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])

  @@id([usuarioId, habilidadId])
  @@index([habilidadId], map: "usuarios_habilidades_habilidad_id_fkey")
  @@map("usuarios_habilidades")
}

model Categoria {
  id          Int                   @id @default(autoincrement())
  nombre      String                @db.VarChar(255)
  actividades ActividadCategorias[]
  comunidades ComunidadCategorias[]
  propuestas  PropuestaCategorias[]

  @@map("categorias")
}

model Propuesta {
  id           Int                     @id @default(autoincrement())
  nombre       String                  @db.VarChar(255)
  descripcion  String                  @db.Text
  fechaEntrega DateTime?               @map("fecha_entrega")
  multimediaId Int?                    @map("multimedia_id")
  creadorId    Int?                    @map("creador_id")
  estado       String                  @default("Iniciando") @db.VarChar(50)
  createdAt    DateTime                @default(now()) @map("created_at")
  categorias   PropuestaCategorias[]
  evaluaciones PropuestaEvaluaciones[]
  creador      Usuario?                @relation(fields: [creadorId], references: [id])
  multimedia   Multimedia?             @relation(fields: [multimediaId], references: [id])

  @@index([creadorId], map: "propuestas_creador_id_fkey")
  @@index([multimediaId], map: "propuestas_multimedia_id_fkey")
  @@map("propuestas")
}

model PropuestaEvaluaciones {
  id           Int        @id @default(autoincrement())
  propuestaId  Int        @map("propuesta_id")
  evaluacionId Int        @map("evaluacion_id")
  evaluacion   Evaluacion @relation(fields: [evaluacionId], references: [id])
  propuesta    Propuesta  @relation(fields: [propuestaId], references: [id])

  @@index([evaluacionId], map: "propuesta_evaluaciones_evaluacion_id_fkey")
  @@index([propuestaId], map: "propuesta_evaluaciones_propuesta_id_fkey")
  @@map("propuesta_evaluaciones")
}

model PropuestaCategorias {
  id          Int       @id @default(autoincrement())
  propuestaId Int       @map("propuesta_id")
  categoriaId Int       @map("categoria_id")
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  propuesta   Propuesta @relation(fields: [propuestaId], references: [id])

  @@index([categoriaId], map: "propuesta_categorias_categoria_id_fkey")
  @@index([propuestaId], map: "propuesta_categorias_propuesta_id_fkey")
  @@map("propuesta_categorias")
}

model Actividad {
  id           Int                     @id @default(autoincrement())
  nombre       String                  @db.VarChar(255)
  descripcion  String                  @db.Text
  multimediaId Int?                    @map("multimedia_id")
  fechaEntrega DateTime?               @map("fecha_entrega")
  creadorId    Int?                    @map("creador_id")
  estado       String                  @default("Iniciando") @db.VarChar(50)
  createdAt    DateTime                @default(now()) @map("created_at")
  categorias   ActividadCategorias[]
  evaluaciones ActividadEvaluaciones[]
  creador      Usuario?                @relation(fields: [creadorId], references: [id])
  multimedia   Multimedia?             @relation(fields: [multimediaId], references: [id])

  @@index([creadorId], map: "actividades_creador_id_fkey")
  @@index([multimediaId], map: "actividades_multimedia_id_fkey")
  @@map("actividades")
}

model ActividadCategorias {
  id          Int       @id @default(autoincrement())
  actividadId Int       @map("actividad_id")
  categoriaId Int       @map("categoria_id")
  actividad   Actividad @relation(fields: [actividadId], references: [id])
  categoria   Categoria @relation(fields: [categoriaId], references: [id])

  @@index([actividadId], map: "actividad_categorias_actividad_id_fkey")
  @@index([categoriaId], map: "actividad_categorias_categoria_id_fkey")
  @@map("actividad_categorias")
}

model ActividadEvaluaciones {
  id           Int        @id @default(autoincrement())
  actividadId  Int        @map("actividad_id")
  evaluacionId Int        @map("evaluacion_id")
  actividad    Actividad  @relation(fields: [actividadId], references: [id])
  evaluacion   Evaluacion @relation(fields: [evaluacionId], references: [id])

  @@index([actividadId], map: "actividad_evaluaciones_actividad_id_fkey")
  @@index([evaluacionId], map: "actividad_evaluaciones_evaluacion_id_fkey")
  @@map("actividad_evaluaciones")
}

model Evaluacion {
  id           Int                     @id @default(autoincrement())
  evaluadoId   Int                     @map("evaluado_id")
  evaluadorId  Int                     @map("evaluador_id")
  calificacion Int
  comentario   String?                 @db.Text
  createdAt    DateTime                @default(now()) @map("created_at")
  actividades  ActividadEvaluaciones[]
  evaluador    Usuario                 @relation(fields: [evaluadorId], references: [id])
  propuestas   PropuestaEvaluaciones[]

  @@index([evaluadorId], map: "evaluaciones_evaluador_id_fkey")
  @@map("evaluaciones")
}

model Mensaje {
  id         Int      @id @default(autoincrement())
  emisorId   Int      @map("emisor_id")
  receptorId Int      @map("receptor_id")
  contenido  String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  emisor     Usuario  @relation("MensajesEnviados", fields: [emisorId], references: [id])
  receptor   Usuario  @relation("MensajesRecibidos", fields: [receptorId], references: [id])

  @@index([emisorId], map: "mensajes_emisor_id_fkey")
  @@index([receptorId], map: "mensajes_receptor_id_fkey")
  @@map("mensajes")
}

model Multimedia {
  id          Int         @id @default(autoincrement())
  url         String      @db.VarChar(255)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  actividades Actividad[]
  comunidades Comunidad[]
  propuestas  Propuesta[]

  @@map("multimedias")
}

model Ubicacion {
  id          Int         @id @default(autoincrement())
  nombre      String      @db.VarChar(255)
  municipio   String      @db.VarChar(255)
  coordenadas Json?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  comunidades Comunidad[]

  @@map("ubicaciones")
}

model Comunidad {
  id                Int                   @id @default(autoincrement())
  nombre            String                @db.VarChar(255)
  descripcion       String                @db.Text
  multimediaId      Int?                  @map("multimedia_id")
  minColaboradores  Int                   @default(1) @map("min_colaboradores")
  maxRepresentantes Int                   @default(1) @map("max_representantes")
  ubicacionId       Int?                  @map("ubicacion_id")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @default(now()) @map("updated_at")
  categorias        ComunidadCategorias[]
  multimedia        Multimedia?           @relation(fields: [multimediaId], references: [id])
  ubicacion         Ubicacion?            @relation(fields: [ubicacionId], references: [id])
  miembros          Miembro[]
  representantes    Representante[]

  @@index([multimediaId], map: "comunidades_multimedia_id_fkey")
  @@index([ubicacionId], map: "comunidades_ubicacion_id_fkey")
  @@map("comunidades")
}

model Representante {
  id          Int       @id @default(autoincrement())
  comunidadId Int       @map("comunidad_id")
  usuarioId   Int       @map("usuario_id")
  fechaInicio DateTime  @default(now()) @map("fecha_inicio")
  fechaFin    DateTime? @map("fecha_fin")
  activo      Boolean   @default(true)
  comunidad   Comunidad @relation(fields: [comunidadId], references: [id])
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])

  @@index([comunidadId], map: "representantes_comunidad_id_fkey")
  @@index([usuarioId], map: "representantes_usuario_id_fkey")
  @@map("representantes")
}

model Miembro {
  id          Int       @id @default(autoincrement())
  comunidadId Int       @map("comunidad_id")
  usuarioId   Int       @map("usuario_id")
  rol         String    @db.VarChar(50)
  fechaUnion  DateTime  @default(now()) @map("fecha_union")
  comunidad   Comunidad @relation(fields: [comunidadId], references: [id])
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])

  @@index([comunidadId], map: "miembros_comunidad_id_fkey")
  @@index([usuarioId], map: "miembros_usuario_id_fkey")
  @@map("miembros")
}

model ComunidadCategorias {
  comunidadId Int       @map("comunidad_id")
  categoriaId Int       @map("categoria_id")
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  comunidad   Comunidad @relation(fields: [comunidadId], references: [id])

  @@id([comunidadId, categoriaId])
  @@index([categoriaId], map: "comunidad_categorias_categoria_id_fkey")
  @@map("comunidad_categorias")
}

model Idea {
  id        Int       @id @default(autoincrement())
  contenido String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  ediciones Edicion[]
  likes     Like[]

  @@map("ideas")
}

model Edicion {
  id        Int      @id @default(autoincrement())
  ideaId    Int      @map("idea_id")
  contenido String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  idea      Idea     @relation(fields: [ideaId], references: [id])

  @@index([ideaId], map: "ediciones_idea_id_fkey")
  @@map("ediciones")
}

model Like {
  id        Int      @id @default(autoincrement())
  ideaId    Int      @map("idea_id")
  usuarioId Int?     @map("usuario_id")
  ipAddress String   @map("ip_address") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  idea      Idea     @relation(fields: [ideaId], references: [id])
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])

  @@unique([ideaId, ipAddress, usuarioId])
  @@index([usuarioId], map: "likes_usuario_id_fkey")
  @@map("likes")
}
