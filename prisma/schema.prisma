generator client {
  provider        = "prisma-client-js"
  engineType      = "library"
  previewFeatures = ["views", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Carrera {
  id                  Int       @id @default(autoincrement())
  // info
  nombre              String    @db.VarChar(255)
  centroUniversitario String    @map("centro_universitario") @db.VarChar(255)
  // relations
  usuarios            Usuario[] @relation("CarreraUsuarios")

  @@map("carreras")
}

model Usuario {
  id              Int        @id @default(autoincrement())
  // access
  cuentaId        Int        @unique @map("cuenta_id")
  // info
  nombre          String     @db.VarChar(255)
  primerApellido  String     @map("primer_apellido") @db.VarChar(255)
  segundoApellido String     @map("segundo_apellido") @db.VarChar(255)
  nombreCompleto  String     @map("nombre_completo") @db.VarChar(765)
  bio             String?    @db.Text
  age             Int?
  direccionId     Int?       @map("direccion_id")
  carreraId       Int?       @map("carrera_id")
  // status
  isActive        Boolean    @default(true) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @default(now()) @updatedAt @map("updated_at")
  deletedAt       DateTime?  @map("deleted_at")
  // relations
  direccion       Direccion? @relation("UsuariosDireccion", fields: [direccionId], references: [id])
  cuenta          Cuenta?    @relation("UsuarioCuenta")
  carrera         Carrera?   @relation("CarreraUsuarios", fields: [carreraId], references: [id])

  @@map("usuarios")
}

model Comunidad {
  id                Int         @id @default(autoincrement())
  // access
  cuentaId          Int         @map("cuenta_id")
  // info
  nombre            String      @db.VarChar(255)
  descripcion       String      @db.Text
  minColaboradores  Int         @default(1) @map("min_colaboradores")
  maxRepresentantes Int         @default(1) @map("max_representantes")
  coloniaId         Int?        @map("colonia_id")
  poligono          Json?
  categoria         String?     @db.VarChar(255)
  creadorId         Int         @map("creador_id")
  // status
  isActive          Boolean     @default(true) @map("is_active")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @default(now()) @updatedAt @map("updated_at")
  deletedAt         DateTime?   @map("deleted_at")
  // relations
  cuenta            Cuenta?     @relation("ComunidadCuenta")
  colonia           Colonia?    @relation("ComunidadesColonia", fields: [coloniaId], references: [id])
  categorias        Categoria[] @relation("ComunidadCategorias")
  creador           Cuenta      @relation("CreadorComunidad", fields: [creadorId], references: [id])
  ideas             Idea[]
  propuestas        Propuesta[]
  actividades       Actividad[]

  @@map("comunidades")
}

model Cuenta {
  id                 Int         @id @default(autoincrement())
  comunidadId        Int?        @unique @map("comunidad_id")
  usuarioId          Int?        @unique @map("usuario_id")
  // access
  uuid               String      @default(dbgenerated("gen_random_uuid()")) @map("uuid") @db.Uuid
  identificador      String      @unique @db.VarChar(32)
  correo             String?     @unique @db.VarChar(255)
  codigo             String?     @unique @db.VarChar(9)
  password           String      @db.VarChar(255)
  // relations
  comunidad          Comunidad?  @relation("ComunidadCuenta", fields: [comunidadId], references: [id])
  usuario            Usuario?    @relation("UsuarioCuenta", fields: [usuarioId], references: [id])
  comunidadesCreadas Comunidad[] @relation("CreadorComunidad")
  propuestas         Propuesta[] @relation("PropuestasCreadas")
  actividades        Actividad[] @relation("ActividadesCreadas")

  @@map("cuentas")
}

model Direccion {
  id        Int       @id @default(autoincrement())
  // info
  calle     String?   @map("calle") @db.VarChar(255)
  noExt     String?   @map("no_ext") @db.VarChar(10)
  noInt     String?   @map("no_int") @db.VarChar(10)
  cp        String?   @map("cp") @db.VarChar(10)
  coloniaId Int?      @map("colonia_id")
  // relations
  colonia   Colonia?  @relation("DireccionesColonia", fields: [coloniaId], references: [id])
  usuario   Usuario[] @relation("UsuariosDireccion")

  @@map("direcciones")
}

model Municipio {
  id       Int       @id @default(autoincrement())
  // info
  cve      String    @map("cve") @db.VarChar(10)
  nombre   String    @map("nombre") @db.VarChar(255)
  // relations
  colonias Colonia[] @relation("colonia")

  @@index([cve])
  @@map("municipios")
}

model Colonia {
  id           Int         @id @default(autoincrement())
  estadoId     Int         @map("estado_id")
  municipioId  Int         @map("municipio_id")
  cveMunicipio String      @default("") @map("cve_municipio") @db.VarChar(10)
  cve          String      @map("cve") @db.VarChar(10)
  // info
  nombre       String      @map("nombre") @db.VarChar(255)
  coordenadas  Json?
  // relations
  comunidades  Comunidad[] @relation("ComunidadesColonia")
  municipio    Municipio?  @relation("colonia", fields: [municipioId], references: [id])
  direcciones  Direccion[] @relation("DireccionesColonia")

  @@map("colonias")
}

model Categoria {
  id          Int        @id @default(autoincrement())
  // info
  nombre      String     @db.VarChar(255)
  propuestaId Int?       @map("propuesta_id")
  actividadId Int?       @map("actividad_id")
  comunidadId Int?       @map("comunidad_id")
  // relations
  actividades Actividad? @relation("ActividadCategorias", fields: [actividadId], references: [id])
  comunidades Comunidad? @relation("ComunidadCategorias", fields: [comunidadId], references: [id])
  propuestas  Propuesta? @relation("PropuestaCategorias", fields: [propuestaId], references: [id])

  @@map("categorias")
}

model Propuesta {
  id          Int         @id @default(autoincrement())
  // info
  titulo      String      @db.VarChar(255)
  descripcion String      @db.Text
  creadorId   Int         @map("creador_id")
  comunidadId Int?        @map("comunidad_id")
  //  fechaEntrega DateTime?               @map("fecha_entrega")
  // status
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")
  // relations
  categorias  Categoria[] @relation("PropuestaCategorias")
  creador     Cuenta?     @relation("PropuestasCreadas", fields: [creadorId], references: [id])
  comunidad   Comunidad?  @relation(fields: [comunidadId], references: [id])

  @@map("propuestas")
}

model Actividad {
  id          Int       @id @default(autoincrement())
  // info
  nombre      String    @db.VarChar(255)
  descripcion String    @db.Text
  creadorId   Int       @map("creador_id")
  comunidadId Int?      @map("comunidad_id")
  //  fechaEntrega DateTime?               @map("fecha_entrega")
  // status
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // relations
  categorias Categoria[] @relation("ActividadCategorias")
  creador    Cuenta?     @relation("ActividadesCreadas", fields: [creadorId], references: [id])
  comunidad  Comunidad?  @relation(fields: [comunidadId], references: [id])

  @@map("actividades")
}

// model Evaluacion {
//  id           Int                     @id @default(autoincrement())
//  evaluadoId   Int                     @map("evaluado_id")
//  evaluadorId  Int                     @map("evaluador_id")
//  calificacion Int
//  comentario   String?                 @db.Text
//  createdAt    DateTime                @default(now()) @map("created_at")
//  actividades  ActividadEvaluaciones[]
//  evaluador    Usuario                 @relation(fields: [evaluadorId], references: [id])
//  propuestas   PropuestaEvaluaciones[]
//
//  @@index([evaluadorId], map: "evaluaciones_evaluador_id_fkey")
//  @@map("evaluaciones")
//}

// model Mensaje {
//  id         Int      @id @default(autoincrement())
//  emisorId   Int      @map("emisor_id")
//  receptorId Int      @map("receptor_id")
//  contenido  String   @db.Text
//  createdAt  DateTime @default(now()) @map("created_at")
//  emisor     Usuario  @relation("MensajesEnviados", fields: [emisorId], references: [id])
//  receptor   Usuario  @relation("MensajesRecibidos", fields: [receptorId], references: [id])
//
//  @@index([emisorId], map: "mensajes_emisor_id_fkey")
//  @@index([receptorId], map: "mensajes_receptor_id_fkey")
//  @@map("mensajes")
//}

// model Multimedia {
//  id          Int         @id @default(autoincrement())
//  url         String      @db.VarChar(255)
//  createdAt   DateTime    @default(now()) @map("created_at")
//  updatedAt   DateTime    @default(now()) @map("updated_at")
//  actividades Actividad[]
//  comunidades Comunidad[]
//  propuestas  Propuesta[]
//
//  @@map("multimedias")
//}

// model Representante {
//  id          Int       @id @default(autoincrement())
//  comunidadId Int       @map("comunidad_id")
//  usuarioId   Int       @map("usuario_id")
//  fechaInicio DateTime  @default(now()) @map("fecha_inicio")
//  fechaFin    DateTime? @map("fecha_fin")
//  activo      Boolean   @default(true)
//  comunidad   Comunidad @relation(fields: [comunidadId], references: [id])
//  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
//
//  @@index([comunidadId], map: "representantes_comunidad_id_fkey")
//  @@index([usuarioId], map: "representantes_usuario_id_fkey")
//  @@map("representantes")
//}

model Idea {
  id          Int       @id @default(autoincrement())
  // info
  titulo      String    @db.VarChar(255)
  descripcion String    @db.VarChar(255)
  comunidadId Int?      @map("comunidad_id")
  // status
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // relations
  comunidad Comunidad? @relation(fields: [comunidadId], references: [id])

  @@map("ideas")
}

model Edicion {
  id          Int      @id @default(autoincrement())
  editedId    Int      @map("edited_id")
  editedTable Int      @map("edited_table")
  key         String   @db.Text
  oldValue    String   @map("old_value") @db.Text
  editedAt    DateTime @default(now()) @map("created_at")
  editedBy    DateTime @default(now()) @map("edited_by")

  @@map("ediciones")
}

view ViewDireccion {
  id            Int     @unique
  // info
  calle         String? @map("calle") @db.VarChar(255)
  noExt         String? @map("no_ext") @db.VarChar(10)
  noInt         String? @map("no_int") @db.VarChar(10)
  cp            String? @map("cp") @db.VarChar(10)
  colonia       String? @map("colonia")
  municipio     String?
  cve_municipio String? @map("cve_municipio")
  searchable    String?

  @@map("view_direccion")
}
